{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "mada_admin.csv_export",
    "name" : "CSV Export",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "timeseries",
      "sizeX" : 7.5,
      "sizeY" : 6,
      "resources" : [ ],
      "templateHtml" : "<div fxLayout fxLayoutAlign=\"center center\" style=\"height: 100%\" *ngIf=\"(isLoading$ | async); else form\">\n    <mat-progress-spinner mode=\"indeterminate\"></mat-progress-spinner>\n</div>\n\n<ng-template #form>\n    <div style=\"margin-top: 14px; font-family: Tajawal, Roboto\">\n        <div>\n            <div class=\"datetime-picker input-border input-active\">\n                <label for=\"from-picker\" class=\"datetime-picker__label\">From</label>\n                <input name=\"from-picker\" id=\"from-picker\" type=\"datetime-local\" class=\"datetime-picker__input\" [(ngModel)]=\"startDateTime\" />\n                <div class=\"calendar-btn\">\n                    <button mat-icon-button data-picker-id=\"from-picker\" (click)=\"showPicker($event, fromCalendarBtn)\" #fromCalendarBtn>\n                        <mat-icon>calendar_today</mat-icon>\n                    </button>\n                </div>\n            </div>\n            <div class=\"datetime-picker input-border input-active\">\n                <label for=\"to-picker\" class=\"datetime-picker__label\">To</label>\n                <input name=\"to-picker\" id=\"to-picker\" type=\"datetime-local\" class=\"datetime-picker__input\" [(ngModel)]=\"endDateTime\" />\n                <div class=\"calendar-btn\">\n                    <button mat-icon-button data-picker-id=\"to-picker\" (click)=\"showPicker($event, toCalendarBtn)\" #toCalendarBtn>\n                        <mat-icon>calendar_today</mat-icon>\n                    </button>\n                </div>\n            </div>\n            <mat-form-field appearance=\"outline\" style=\"display: block\">\n                <mat-label for=\"filename\" style=\"font-size: 16px\">File Name</mat-label>\n                <input matInput type=\"text\" name=\"filename\" id=\"data-filename\" [(ngModel)]=\"dataFilename\" />\n                <span matSuffix>.csv</span>\n            </mat-form-field>\n            <!--<mat-form-field appearance=\"outline\" style=\"display: block\">-->\n            <!--    <mat-label for=\"data-limit\">Limit</mat-label>-->\n            <!--    <input matInput type=\"number\" name=\"data-limit\" id=\"data-limit\" [(ngModel)]=\"dataLimit\" />-->\n            <!--</mat-form-field>-->\n            <!--</div>-->\n            <mat-form-field appearance=\"outline\" style=\"display: block\" floatLabel=\"always\">\n                <mat-label for=\"selected-keys\" >Selected Keys</mat-label>\n                <mat-select [(ngModel)]=\"selectedKeys\" name=\"selected-keys\" id=\"selected-keys\" (selectionChange)=\"changeSelection($event, selectedKeys)\" multiple>\n                    <mat-select-trigger style=\"color: white\">{{triggerText}}</mat-select-trigger>\n                    <mat-option value=\"select-all-keys\"><strong>All</strong></mat-option>\n                    <mat-option [value]=\"key\" *ngFor=\"let key of allTelemetryKeys; let i = index;\">{{key}}</mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <div fxLayout fxLayoutAlign=\"center\">\n            <button class=\"export-btn\" (click)=\"export()\" [disabled]=\"(isLoading$ | async)\">Export CSV</button>\n        </div>\n    </div>\n</ng-template>",
      "templateCss" : "@import url(\"https://fonts.googleapis.com/css?family=Tajawal\");\n\n.datetime-picker{\n    position: relative;\n    background: inherit;\n    margin-bottom: 25.5px;\n}\n\n.datetime-picker:hover {\n  /*background-color: #ececec;*/\n}\n\n.datetime-picker:focus-within {\n  /*background-color: #dcdcdc;*/\n}\n\n.datetime-picker__label {\n    position: absolute;\n    /*color: #aaa;*/\n    font-size: 15px;\n    margin-top: 15px;\n    transition: margin-top .3s, font-size .3s, margin-left .3s, padding .3s, color .2s;\n}\n\n.datetime-picker .calendar-btn{\n    position: absolute;\n    top: 50%;\n    left: calc(100% - 40px);\n    transform: translateY(-50%);\n    \n}\n\n.datetime-picker__input {\n    /*outline: none;*/\n    border: 0;\n    width: 100%;\n    padding: 18px 16px;\n    /*border-bottom: 1px solid #aaa;*/\n    font-size: 15px;\n    background: inherit;\n    color: inherit;\n    \n}\n/*.datetime-picker .datetime-picker__input:focus ~ .datetime-picker__label {*/\n/*    color: #b2feff*/\n/*}*/\n\n.datetime-picker__input::-webkit-calendar-picker-indicator{\n    display: none;\n}\n.input-active .datetime-picker__label {\n    font-size: 14px !important;\n    margin-top: -5px;\n    margin-left: -1px;\n    /*color: #512da8;*/\n}\n.input-border .datetime-picker__input {\n    border: 1px solid #b2feff;\n    padding-left: 10px;\n    border-radius: 5px;\n    outline: 2px solid transparent;\n    transition: outline-color .2s ease-in;\n    outline-offset: -2px;\n}\n\n.input-border .datetime-picker__input:focus,\n.input-border .datetime-picker__input:hover{\n    outline-color: #b2feff;\n}\n.input-border .datetime-picker__label {\n    background: inherit;\n    margin-left: 10px;\n}\n.input-border.input-active .datetime-picker__label {\n    margin-top: -9px;\n    padding: 0 7px 0 5px;\n    margin-left: 6px;\n    color: #b2feff;\n    background: #111217;\n}\n.input-filled-in-not-focus .datetime-picker__label {\n    color: #b2feff !important;\n}\n\n.mat-form-field-label {\n    /*change color of label*/\n    color: #b2feff !important;\n    font-family: Tajawal, Roboto !important;\n    \n}\n\n.mat-form-field-outline {\n    /*change color of outline*/\n   color: #b2feff !important;\n} \n\n.mat-form-field-ripple {\n    /*change color of underline when focused*/\n    background-color: #b2feff !important;\n}\n\n#data-limit::-webkit-outer-spin-button,\n#data-limit::-webkit-inner-spin-button {\n  display: none;\n}\n.mat-form-field-suffix, .mat-datepicker-toggle .mat-icon-button {\n\talign-self: center;\n\topacity: 0.75;\n}\n\n.mat-select-arrow{\n    color: #b2feff;\n}\n\n.export-btn {\n    padding: 1em 3em;\n    font-size: 12px;\n    text-transform: uppercase;\n    letter-spacing: 2.5px;\n    font-weight: 500;\n    color: #000;\n    background-color: #fff;\n    border: none;\n    border-radius: 45px;\n    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);\n    transition: all 0.3s ease 0s;\n    cursor: pointer;\n    outline: none;\n}\n  \n.export-btn:hover, .export-btn:focus {\n    background-color: #b2feff;\n    box-shadow: 0 12px 15px rgba(154, 202, 183, 0.3);\n    color:#000;\n    transform: translateY(-5px);\n}\n  \n.export-btn:active {\n    transform: translateY(-1px);\n}\n\n.export-btn:disabled{\n    background: #aaa;\n    transition: none;\n    transform: none;\n    cursor: not-allowed;\n    box-shadow: none;\n}",
      "controllerScript" : "\nconst months = [\n    \"January\", \"Febuary\", \"March\", \n    \"April\", \"May\", \"June\", \n    \"July\", \"August\", \"Sebtember\",\n    \"October\", \"November\", \"December\"\n];\n\nlet keys = [];\nconst selectedKeys = [];\n\nconst formatTs = function(ts){\n    const datetime = new Date(ts);\n    \n    return {\n        seconds: datetime.getSeconds(),\n        minutes: datetime.getMinutes(),\n        hours: datetime.getHours(),\n        date: datetime.getDate(),\n        month: datetime.getMonth() + 1,\n        year: datetime.getFullYear(),\n        dayOfWeek: \"Sunday\"\n    };\n};\n// NOTE: Some telemetry values could be json string which has quotes and commas.\n// These cases must be handled\nconst toCsvString = function(keysObj){\n    let urlString = \"\";\n    \n    for(const telemetryKey in keysObj){\n        const tsData = keysObj[telemetryKey];\n        const formattedTsData = tsData.map(function(tsObj){\n            let {ts, value} = tsObj;\n            // Handle the value if it is string & includes quotes or commas\n            if(typeof value === \"string\" && (value.includes('\"') || value.includes(','))){\n                value = value.replaceAll('\"', '\"\"');\n                value = `\"${value}\"`;\n            }\n            \n            return {\n                ts: formatTs(ts),\n                value: value\n            };\n        });\n        \n        urlString += `${telemetryKey}\\n`;\n        urlString += `Date/Time,Value`;\n        \n        urlString += formattedTsData.reduce(function(acc, tsObj){\n            const {ts, value} = tsObj;\n            return `${acc}\\n${ts.year}-${padTo2Digits(ts.month)}-${padTo2Digits(ts.date)} ${padTo2Digits(ts.hours)}:${padTo2Digits(ts.minutes)}:${padTo2Digits(ts.seconds)},${value}`;\n        }, \"\");\n        \n        urlString += \"\\n\\n\";\n        \n        // console.log(\"key:\", telemetryKey, \"data:\", formattedTsData, \"url:\", urlString);\n    }\n    \n    return urlString;\n};\n\nconst downloadCSV = function(csvString, filename, $container){\n    let href = \"data:application/csv;charset=utf-8,\" + encodeCsvString(csvString);\n    \n    // Create anchor element\n    const anchor = $(\"<a/>\", {\n        href: href,\n        download: filename,\n        id: \"hidden-anchor\"\n    });\n    \n    $container.append(anchor);\n    \n    anchor[0].click();\n    anchor.remove();\n};\n\nconst encodeCsvString = function(csvString){\n    return encodeURIComponent(csvString);\n};\n\nconst padTo2Digits = function(num) {\n    return num.toString().padStart(2, '0');\n};\n\nconst formatDateTime = function(date){\n    const dateStr = [\n        date.getFullYear(),\n        padTo2Digits(date.getMonth() + 1),\n        padTo2Digits(date.getDate()),\n    ].join('-');\n    \n    const timeStr = [\n        padTo2Digits(date.getHours()),\n        padTo2Digits(date.getMinutes()),\n        padTo2Digits(date.getSeconds()),\n    ].join(':');\n    \n    return dateStr + ' ' + timeStr;\n    \n}\n\nself.onInit = function() {\n    const ctx = self.ctx;\n    const {timeWindow, $scope, attributeService, $container, datasources} = ctx;\n    const datasource = datasources[0];\n    \n    const entityId = {\n        id: datasource.entityId,\n        entityType: datasource.entityType\n    };\n    \n    // console.log(ctx);\n    // console.log(\"timeWindow\", timeWindow);\n    \n    $scope.prevSelectedKeys = [];\n    $scope.selectedKeys = [\"select-all-keys\"];\n    $scope.triggerText = \"All\";\n    $scope.dataLimit = 1000;\n    $scope.dataFilename = \"timeseries\";\n    \n    const now = Date.now();\n    const yesterday = now - (24 * 60 * 60 * 1000);\n    \n    $scope.startDateTime = formatDateTime(new Date(yesterday));\n    $scope.endDateTime = formatDateTime(new Date(now));\n    \n    const inputs = $(\".datetime-picker__input\");\n\n    inputs.each((_,input) => {\n        // console.log(input);\n        input.addEventListener('focus', function() {\n            this.parentElement.classList.add('input-active');\n            this.parentElement.classList.remove('input-filled-in-not-focus');\n        });\n        \n        input.addEventListener('blur', function() {\n            if(this.value == \"\"){\n                this.parentElement.classList.remove('input-active');\n            }else{\n                this.parentElement.classList.add('input-filled-in-not-focus');\n            }\n        });\n    });\n    \n    $scope.showPicker = function(e, ref){\n        const btn = ref._elementRef.nativeElement;\n        const pickerId = $(btn).data(\"picker-id\");\n        const picker = $(\"#\" + pickerId)[0];\n        \n        picker.showPicker();\n    };\n    \n    \n    if(datasource.entityName !== \"function\"){\n        ctx.http.get(`/api/plugins/telemetry/${entityId.entityType}/${entityId.id}/keys/timeseries`).subscribe(function(res){\n            // console.log(\"keys\", res);\n            keys = res;\n            $scope.allTelemetryKeys = keys;\n            \n            for(const key of keys){\n                $scope.selectedKeys.push(key);\n            }\n            $scope.prevSelectedKeys = $scope.selectedKeys.map(function(key){return key});\n        });\n    }\n    \n    // Selection change:\n    // If option other than \"ALL\" is deselected, check if \"ALL\" option is selected, then deselect it.\n    // If \"ALL\" option is deselected, deselect all other options\n    // NOTE: The order of the selected elements in important\n    $scope.changeSelection = function($event, selectedKeys){\n        // console.log(\"selectedKeys\", selectedKeys, \"prevSelectedKeys\", $scope.prevSelectedKeys);\n        const selectedOptions = $event.value;\n        \n        const allKeysWereSelected = $scope.prevSelectedKeys.includes(\"select-all-keys\");\n        const allKeysAreSelected = $scope.selectedKeys.includes(\"select-all-keys\");\n        \n        if(!allKeysWereSelected && allKeysAreSelected){\n            // When 'All' option is selected\n            $scope.selectedKeys = $scope.allTelemetryKeys.map(function(key){return key});\n            $scope.selectedKeys.unshift(\"select-all-keys\");\n        }else if(allKeysWereSelected && allKeysAreSelected){\n            // When any option other than 'All' is selected\n            const index = $scope.selectedKeys.indexOf(\"select-all-keys\");\n            $scope.selectedKeys = $scope.selectedKeys.slice(1);\n            // console.log(\"Other than 'All' selected\", $scope.selectedKeys, index);\n        }else if(!allKeysWereSelected && !allKeysAreSelected){\n            // When\n            const {selectedKeys, allTelemetryKeys} = $scope;\n            const allKeysSelected = allTelemetryKeys.every(function(key){\n                return selectedKeys.includes(key);\n            });\n            // console.log(\"All keys selected?\", allKeysSelected);\n            \n            if(selectedKeys.length === allTelemetryKeys.length && allKeysSelected){\n                $scope.selectedKeys = $scope.allTelemetryKeys.map(function(key){return key});\n                $scope.selectedKeys.unshift(\"select-all-keys\");\n            }\n        }else if(allKeysWereSelected && !allKeysAreSelected){\n            // console.log(\"NotAllSelected & AllWereSelected\");\n            $scope.selectedKeys = [];\n        }\n        \n        $scope.triggerText = $scope.selectedKeys.includes(\"select-all-keys\")? \"All\" : ($scope.selectedKeys.length < 1? \"\" : $scope.selectedKeys.toString());\n        \n        $scope.prevSelectedKeys = $scope.selectedKeys.map(function(key){return key});\n    };\n    \n    $scope.export = function(){\n        if(!$scope.selectedKeys || $scope.selectedKeys.length < 1) return;\n        \n        // TODO: Check if end date is larger than start date\n        const startTs = Date.parse($scope.startDateTime);\n        const endTs = Date.parse($scope.endDateTime);\n        \n        if(startTs >= endTs){\n            ctx.showErrorToast(\"Invalid time period!\");\n            return;\n        }\n        \n        const monthPeriod = 31 * 24 * 60 * 60 * 1000;\n        // console.log(\"period=\", monthPeriod, endTs - startTs)\n        if(endTs - startTs > monthPeriod){\n            ctx.showErrorToast(\"Time period longer than 31 days is not allowed!\");\n            return;\n        }\n        \n        const limit = 60000;\n        const agg = \"NONE\";\n        const interval = 0;\n        const orderBy = \"DESC\";\n        const useStrictDataTypes = false;\n        \n        const keysToExport = $scope.selectedKeys.includes(\"select-all-keys\") ? $scope.allTelemetryKeys : $scope.selectedKeys;\n        const filename = $scope.dataFilename? $scope.dataFilename : \"timeseries\";\n        \n        // console.log(\"Export\", keysToExport);\n        // console.log(\"Start:\", startTs, \"=\", $scope.startDateTime);\n        // console.log(\"End:\", endTs, \"=\", $scope.endDateTime);\n       \n        attributeService.getEntityTimeseries(entityId, keysToExport, startTs, endTs, limit, agg, interval, orderBy, useStrictDataTypes).subscribe(function(data){\n                // console.log(\"TS data from DB\", data);\n                const csvString = toCsvString(data);\n                \n                downloadCSV(csvString, `${filename}.csv`, $container);\n        });\n    };\n    \n    ctx.updateWidgetParams();\n};\n\nself.onDataUpdated = function() {\n   self.ctx.detectChanges();\n};\n\n// self.onLatestDataUpdated = function() {\n    \n// };\n\n// self.onResize = function() {\n    \n// };\n\n// self.onEditModeChanged = function() {\n    \n// };\n\n// self.onDestroy = function() {\n    \n// };\n\nself.typeParameters = function() {\n    return {\n        maxDatasources: 1,\n        dataKeysOptional: true\n    };\n}",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}",
      "latestDataKeySettingsSchema" : "{}",
      "settingsDirective" : "tb-flot-line-widget-settings",
      "dataKeySettingsDirective" : "tb-flot-line-key-settings",
      "latestDataKeySettingsDirective" : "tb-flot-latest-key-settings",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"showLines\":true,\"fillLines\":false,\"showPoints\":false},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#111217\",\"color\":\"#ffffff\",\"padding\":\"8px\",\"settings\":{\"stack\":false,\"fontSize\":10,\"fontColor\":\"#545454\",\"showTooltip\":true,\"tooltipIndividual\":false,\"tooltipCumulative\":false,\"hideZeros\":false,\"grid\":{\"verticalLines\":false,\"horizontalLines\":false,\"outlineWidth\":1,\"color\":\"#545454\",\"backgroundColor\":null,\"tickColor\":\"#DDDDDD\"},\"xaxis\":{\"title\":null,\"showLabels\":false},\"yaxis\":{\"min\":null,\"max\":null,\"title\":null,\"showLabels\":false},\"shadowSize\":4,\"smoothLines\":false,\"comparisonEnabled\":false,\"xaxisSecond\":{\"axisPosition\":\"top\",\"title\":null,\"showLabels\":true},\"customLegendEnabled\":false},\"title\":\"CSV Export\",\"dropShadow\":true,\"enableFullscreen\":false,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"useDashboardTimewindow\":false,\"displayTimewindow\":false,\"showTitleIcon\":false,\"widgetStyle\":{},\"widgetCss\":\"\",\"pageSize\":1024,\"noDataDisplayMessage\":\"\",\"showLegend\":false,\"legendConfig\":{\"direction\":\"column\",\"position\":\"bottom\",\"sortDataKeys\":false,\"showMin\":false,\"showMax\":false,\"showAvg\":true,\"showTotal\":false,\"showLatest\":false}}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "ec5ef2a0-77dc-11ee-819d-0f0d9d5d78ac"
    }
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}