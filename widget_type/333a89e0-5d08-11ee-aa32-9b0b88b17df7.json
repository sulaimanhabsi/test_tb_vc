{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "onsor_custom.dynamic_io_card",
    "name" : "Dry Contact Pins Widget",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "rpc",
      "sizeX" : 11.5,
      "sizeY" : 8.5,
      "resources" : [ ],
      "templateHtml" : "<div class=\"io-widget\" fxLayout=\"column\" fxLayoutAlign=\"space-between\" style=\"font-family: Tajawal, Roboto\">\n    <mat-spinner *ngIf=\"isLoading$ | async; else showData\"></mat-spinner>\n    <ng-template #showData>\n        <!--<div>-->\n        <div class=\"io-pins-container\" fxLayout=\"row wrap\" *ngIf=\"pins && pins.length > 0; else noPins\">\n            <div class=\"pin-card\" *ngFor=\"let pin of pins; let i = index\" [fxFlex]=\"pinCardWidth\" fxLayout=\"column\" fxLayoutGap=\"15px\">\n                <div fxLayout fxLayoutAlign=\"space-between\" *ngIf=\"isEditMode\">\n                        <button mat-icon-button color=\"accent\" aria-label=\"Settings icon button\" class=\"pin-card-btn pin-card-dropBtn\" (click)=\"openSettingsWindow($event, pin, i)\" matTooltip=\"Pin Settings\" matTooltipPosition=\"above\" *ngIf=\"isEditMode\">\n                            <mat-icon>settings</mat-icon>\n                        </button>\n                    <button mat-icon-button\n                        aria-label=\"Delete pin icon button\"\n                        class=\"pin-card-btn\"\n                        (click)=\"removePin($event, i, pin)\">\n                        <mat-icon>delete</mat-icon>\n                    </button>\n                </div>\n                <!--Pin Label Section-->\n                <div>\n                    <div class=\"pin-card-label\"\n                        *ngIf=\"!isEditMode; else labelInput\">\n                        {{pin.label}}\n                    </div>\n                    <ng-template #labelInput>\n                        <input type=\"text\"\n                            class=\"pin-card-label_input\"\n                            (input)=\"changeInput($event, inputTypes.LABEL, pin)\"\n                            [value]=\"pin.label\"\n                            placeholder=\"Pin Label\" />\n                    </ng-template>\n                </div>\n                <!--Pin Telemetry Key Section-->\n                <input *ngIf=\"isEditMode\" type=\"text\"\n                    class=\"pin-card-telemetryKey_input\"\n                    (input)=\"changeInput($event, inputTypes.TELEMETRY_KEY, pin)\"\n                    [value]=\"pin.telemetryKey\"\n                    placeholder=\"Telemetry Key\" [disabled]=\"readOnlyTelemetry\" />\n    \n                <div fxLayout fxLayoutAlign=\"space-between\">\n                    <!--Node ID Section-->\n                    <div fxLayout=\"column\"\n                        fxLayoutAlign=\"center center\" fxFlex=\"50px\">\n                        <div class=\"pin-card-nodeId_label\">\n                            Node ID</div>\n                        <div class=\"pin-card-nodeId\"\n                            *ngIf=\"!isEditMode; else nodeIdInput\">\n                            {{pin.nodeId}}\n                        </div>\n                        <ng-template #nodeIdInput>\n                            <input type=\"number\"\n                                class=\"pin-card-nodeId_input\"\n                                (input)=\"changeInput($event, inputTypes.NODE_ID, pin)\"\n                                [value]=\"pin.nodeId\" />\n                        </ng-template>\n                    </div>\n                    <!--Pin Number Section-->\n                    <div fxLayout=\"column\"\n                        fxLayoutAlign=\"center center\" fxFlex=\"50px\">\n                        <div class=\"pin-card-pinNumber_label\">\n                            Pin\n                            #\n                        </div>\n                        <div class=\"pin-card-pinNumber\"\n                            *ngIf=\"!isEditMode; else numberInput\">\n                            {{pin.number}}\n                        </div>\n                        <ng-template #numberInput>\n                            <input type=\"number\" \n                                class=\"pin-card-pinNumber_input\"\n                                (input)=\"changeInput($event, inputTypes.PIN_NUMBER, pin)\"\n                                [value]=\"pin.number\" />\n                        </ng-template>\n                    </div>\n                </div>\n                <!--Pin Status Section-->\n                <div style=\"margin-bottom: 3px\">\n                    <!--<div *ngIf=\"pin.active\" class=\"pin-card-status pin-card-status_active\">-->\n                    <!--    ACTIVE-->\n                    <!--</div>-->\n                    <!--<div *ngIf=\"!pin.active\" class=\"pin-card-status\">-->\n                    <!--    INACTIVE-->\n                    <!--</div>-->\n                    <div [innerText]=\"pin.active ? 'ACTIVE' : 'INACTIVE'\" [ngClass]=\"pin.active ? 'pin-card-status pin-card-status_active' : 'pin-card-status'\"></div>\n                </div>\n            </div>\n        </div>\n        <ng-template #noPins>\n            <div fxLayout fxLayoutAlign=\"center center\" class=\"no-data\">\n                <span>No Data Available</span>\n            </div>\n        </ng-template>\n    <!--</div>-->\n    </ng-template>\n    <div fxFlex=\"48px\" fxLayoutAlign=\"start\" fxLayoutGap=\"4px\"\n        class=\"io-widget-actions\" *ngIf=\"!readOnly\">\n        <button mat-icon-button color=\"accent\"\n            [aria-label]=\"isEditMode ? 'Edit pin icon button' : 'Save changes icon button'\"\n            (click)=\"toggleEditMode()\"\n            [matTooltip]=\"isEditMode ? 'Apply Changes' : 'Edit Mode'\"\n            matTooltipPosition=\"above\">\n            <mat-icon *ngIf=\"!isEditMode; else checkIcon\">\n                edit</mat-icon>\n            <ng-template #checkIcon>\n                <mat-icon>check</mat-icon>\n            </ng-template>\n        </button>\n        <button mat-icon-button color=\"accent\"\n            aria-label=\"Discard changes icon button\"\n            (click)=\"discardChanges()\" matTooltip=\"Discard Changes\"\n            matTooltipPosition=\"above\" *ngIf=\"isEditMode\">\n            <mat-icon>close</mat-icon>\n        </button>\n        <button mat-icon-button color=\"accent\"\n            aria-label=\"Add pin icon button\"\n            (click)=\"addPin()\" matTooltip=\"Add Pin\"\n            matTooltipPosition=\"above\" *ngIf=\"isEditMode\">\n            <mat-icon>add</mat-icon>\n        </button>\n    </div>\n</div>",
      "templateCss" : "\n\n#container {\n    /*overflow: auto;*/\n}\n\n.io-widget {\n    height: 100%;\n    \n}\n\n.io-pins-container {\n    gap: 12px;\n    padding: 2px 0;\n    overflow: auto;\n}\n\n.no-data {\n    /*display: flex;*/\n    /*justify-content: center;*/\n    /*align-items: center;*/\n    height: 200px;\n    /*color: #7d7d7d;*/\n}\n\n.pin-card {\n    padding: 8px;\n    flex-direction: column;\n    border: none;\n    justify-content:  center;\n    background-color: #212121;\n    /*border-top: 1px solid #EBECF0;*/\n    /*border-left: 1px solid #EBECF0;*/\n    border-radius: 4px;\n    /*color: #3d3d3d;*/\n    /*box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);*/\n}\n\n.pin-card-btn {\n    width: 24px;\n    height: 24px;\n    line-height: 24px;\n}\n\n.pin-card-btn .mat-icon {\n    font-size: 18px;\n    width: 18px;\n    height: 18px;\n    line-height: 18px;\n    color: #7d7d7d;\n}\n.pin-card-dropBtn .mat-icon{\n    pointer-events: none;\n}\n\n.pin-card input {\n    border: none;\n    /*background-color: #e9eef5;*/\n    color: #ebebeb;\n    background-color: #424242;\n    transition: box-shadow 300ms ease;\n}\n\n.pin-card input:focus {\n    outline: none;\n\tbox-shadow: inset 0 0 0 2px #7d7d7d;\n}\n\n.pin-card-label,\n.pin-card-label_input,\n.pin-card-telemetryKey_input,\n.pin-card-pinNumber_input,\n.pin-card-nodeId_input {\n    text-align: center;\n    width: 100%;\n    padding: 3px 8px;\n}\n\n.pin-card-label_input,\n.pin-card-telemetryKey_input,\n.pin-card-pinNumber_input,\n.pin-card-nodeId_input {\n    border-radius: 3px;\n    /*color: #2d3748;*/\n}\n\n.pin-card-label,\n.pin-card-label_input {\n    /*text-transform: uppercase;*/\n    font-weight: bold;\n}\n\n.pin-card-telemetryKey_input:disabled{\n    color: #696969;\n}\n\n.pin-card-label {\n    border: 1px solid rgba(255, 255, 255, 0);\n}\n\n.pin-card-nodeId {}\n\n.pin-card-nodeId_input {\n    /*width: 50px;*/\n}\n\n.pin-card-nodeId_label,\n.pin-card-pinNumber_label {\n    margin-bottom: 3px;\n    font-size: 14px;\n    /*color: #7d7d7d;*/\n    font-weight: bold;\n}\n\n.pin-card-pinNumber,\n.pin-card-nodeId {\n    font-size: 14px;\n    /*color: #4a5568;*/\n    text-align: center;\n}\n\n.pin-card-pinNumber {\n    width: 40px;\n}\n\n\n.pin-card-pinNumber_input {\n    width: 100%;\n}\n\n.pin-card-nodeId_input::-webkit-inner-spin-button,\n.pin-card-nodeId_input::-webkit-outer-spin-button,\n.pin-card-pinNumber_input::-webkit-inner-spin-button,\n.pin-card-pinNumber_input::-webkit-outer-spin-button{\n    opacity: 1;\n    display: none;\n}\n\n.pin-card-status {\n    color: #00b834;\n    font-size: 14px;\n    font-weight: bold;\n    height: 25px;\n    line-height: 25px;\n    text-align: center;\n}\n\n.pin-card-status.pin-card-status_active {\n    color: #d40012;\n}\n\n.io-widget-actions { \n    padding: 4px;\n    position: sticky;\n}\n/*.io-widget-actions button{*/\n/*    border: 1px solid #4caf50;*/\n/*    line-height: 40px;*/\n/*    height: 40px;*/\n/*    width: 40px;*/\n/*}*/\n/*.io-widget-actions button .mat-icon{*/\n/*    height: 24px;*/\n/*    width: 24px;*/\n/*    line-height: 24px;*/\n/*}*/\n",
      "controllerScript" : "var ctx = self.ctx;\nvar $injector;\nvar $container;\nvar $scope;\nvar settings = null;\nvar switchCardWidth;\nvar attributeService;\nvar telemetrySubscription;\nvar entityId;\n\n\nfunction fetchAttributes(entityId, keys) {\n    return attributeService.getEntityAttributes(entityId,\n        \"SERVER_SCOPE\", keys);\n}\n\nself.onInit = function() {\n    entityId = {\n        id: ctx.defaultSubscription\n            .targetDeviceId,\n        entityType: \"DEVICE\"\n    };\n\n    attributeService = ctx.attributeService;\n    settings = ctx.settings;\n\n    $scope = ctx.$scope;\n    $scope.pins = [];\n    $scope.errors = [];\n    $scope.readOnly = settings.readOnly;\n    $scope.readOnlyTelemetry = settings.readOnlyTelemetry;\n    $scope.prevState = [];\n    // console.log(\"Read only?\", $scope.readOnly);\n    // TODO: Change this\n    $scope.isEditMode = false;\n    $scope.pinCardWidth = 190 + \"px\";\n    $scope.inputTypes = {\n        LABEL: \"LABEL\",\n        PIN_NUMBER: \"PIN_NUMBER\",\n        TELEMETRY_KEY: \"TELEMETRY_KEY\",\n        NODE_ID: \"NODE_ID\"\n    };\n\n    // console.log(\"ctx\", ctx, \"isEditMode?\", ctx.settings.isEditMode);\n    // console.log(\"settings\", settings);\n    \n    // ctx.dashboard.callbacks.onRemoveWidget = function($event, widget) {\n    //     ctx.dashboard.callbacks.onRemoveWidget($event, widget)\n    //     console.log(\"Remove widget\", $event, widget)\n    // }\n\n    ctx.ngZone.run(function() {\n        fetchAttributes(entityId, [settings.ioConfigName]).subscribe(function(data) {\n            // console.log(\"ctx\", ctx, \"settings\", settings, \"pins\", data);\n\n            if (data.length < 1) return;\n            $scope.pins = data[0].value;\n            \n            if($scope.pins.length < 1) return;\n            \n            // $scope.prevState = $scope.pins.map(function(pin){return pin});\n            createTelemetryKeysSubscription();\n        });\n    });\n\n    $scope.addPin = function() {\n        $scope.pins.push({\n            label: \"\",\n            telemetryKey: \"\",\n            number: null,\n            nodeId: null,\n            active: false,\n            alarmSeverity: \"CRITICAL\"\n        });\n    };\n\n    $scope.removePin = function($event, index, pinObj) {\n        $scope.pins.splice(index, 1);\n    };\n    \n    $scope.openSettingsWindow = function($event, pin, pinIndex){\n        // console.log($event);\n        $scope.currentPinIndex = pinIndex;\n        \n        var settingsHtml = `\n        <form #settingsForm=\"ngForm\" [formGroup]=\"settingsFormGroup\" (ngSubmit)=\"save()\" style=\"min-width: 400px\">\n            <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                <h2>Pin Settings</h2>\n                <span fxFlex></span>\n                <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n                    <mat-icon class=\"material-icons\">close</mat-icon>\n                </button>\n            </mat-toolbar>\n            \n            <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n            </mat-progress-bar>\n            <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n            \n            <div mat-dialog-content fxLayout=\"column\" fxLayoutGap=\"12px\">\n                <mat-label>Alarm Severity</mat-label>\n                <mat-radio-group formControlName=\"severity\" (change)=\"changeAlarmSeverity\" aria-label=\"Select alarm severity\" fxLayout=\"column\" fxLayoutGap=\"8px\">\n                    <mat-radio-button *ngFor=\"let severity of alarmSeverityTypes\" [value]=\"severity.value\" [checked]=\"settingsFormGroup.get('severity').value === severity.value\">{{severity.label}}</mat-radio-button>\n                </mat-radio-group>\n                \n            </div>\n            \n            <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n                <button mat-button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"(isLoading$ | async) || settingsForm.invalid\">\n                    Save\n                </button>\n            </div>\n        </form>\n        `;\n        customDialog.customDialog(settingsHtml, SettingsDialogController).subscribe();\n    };\n    \n    var SettingsDialogController = function (vm){\n        var currentPin = $scope.pins[$scope.currentPinIndex];\n        \n        vm.alarmSeverityTypes = [\n            {label: \"Critical\", value:\"CRITICAL\"}, \n            {label: \"Major\", value:\"MAJOR\"}, \n            {label: \"Minor\", value:\"MINOR\"}, \n            {label: \"Warning\", value: \"WARNING\"}, \n            {label: \"Indeterminate\", value: \"INDETERMINATE\"}\n        ];\n        \n        vm.settingsFormGroup = vm.fb.group({\n            severity: [currentPin.alarmSeverity, [vm.validators.required]]\n        });\n        \n        vm.cancel = function(){\n            vm.dialogRef.close();\n        };\n        \n        vm.save = function(){\n            // console.log(\"settings\", vm.settingsFormGroup.value);\n            currentPin.alarmSeverity = vm.settingsFormGroup.value.severity;\n            // console.log($scope.pins)\n            vm.dialogRef.close();\n        };\n        \n    };\n\n    // inputType = LABEL | PIN_NUMBER | TELEMETRY_KEY | NODE_ID\n    $scope.changeInput = function($event, inputType, pin, pinIndex) {\n        var value = $event.target.value;\n        var inputTypes = $scope.inputTypes;\n\n        switch (inputType) {\n            case inputTypes.LABEL:\n                pin.label = value;\n                break;\n            case inputTypes.PIN_NUMBER:\n                pin.number = value;\n                break;\n            case inputTypes.TELEMETRY_KEY:\n                pin.telemetryKey = value;\n                break;\n            case inputTypes.NODE_ID:\n                pin.nodeId = value;\n                break;\n        }\n    };\n    \n    $scope.discardChanges = function(){\n        $scope.pins = $scope.prevState.map(function(pin){return {...pin}});\n        // console.log(\"pins\", $scope.pins, \"prevState\", $scope.prevState)\n        $scope.isEditMode = false;\n    };\n\n    $scope.toggleEditMode = function() {\n        if ($scope.isEditMode) {\n            saveChanges();\n        }else{\n            // console.log(\"save old state\", $scope.pins);\n            \n            $scope.prevState = $scope.pins.map(function(pin){return {...pin}});\n        }\n\n        if ($scope.errors.length < 1) {\n            // settings.isEditMode = !$scope\n            // .isEditMode;\n            $scope.isEditMode = !$scope.isEditMode;\n        }\n\n        // console.log(\"toggleEditMode, settings\", settings);\n    };\n    \n    \n    function onDataUpdated(subscription, detectChanges) {\n            if ($scope.isEditMode) return;\n\n            // console.log(\"onDataUpdated\", subscription);\n            \n            var subscData = subscription.data;\n\n            if (subscData.length < 1) return;\n\n            subscData.forEach(function(keyData) {\n                if (!(keyData && keyData.data && keyData.data[0]))\n                    return;\n\n                var updatedDataKey = keyData.dataKey;\n\n                var pinToUpdate = $scope.pins.find(function(pin) {\n                    return pin.telemetryKey === updatedDataKey.name;\n                });\n\n                var pinIndex = $scope.pins.findIndex(function(pin) {\n                    return pin.telemetryKey ===updatedDataKey.name;\n                });\n\n                var pinStatusElementToUpdate = $(\".pin-card-status\").eq(pinIndex)\n\n                var newValue = keyData.data[0][1];\n\n                // console.log(\"updated dataKey:\", updatedDataKey, \"data\", newValue, \"pinToUpdate\", pinToUpdate, \"pin index\", pinIndex, \"pinStatusElementToUpdate\", pinStatusElementToUpdate);\n\n                if (newValue ===\"true\" || newValue === 1) {\n                    pinToUpdate.active = true;\n                    pinStatusElementToUpdate.addClass(\"pin-card-status_active\");\n                    pinStatusElementToUpdate.text(\"ACTIVE\");\n                } else if (newValue === \"false\" || newValue === 0) {\n                    pinToUpdate.active = false;\n                    pinStatusElementToUpdate.removeClass(\"pin-card-status_active\");\n                    pinStatusElementToUpdate.text(\"INACTIVE\");\n                }\n            })\n        }\n\n    function onDataUpdateError(subscription,\n        e) {\n        console.log(\"onDataUpdatedError\", e);\n    }\n\n    function createTelemetryKeysSubscription(){\n        var subscriptionOptions = {\n                callbacks: {\n                    onDataUpdated: (subscription, detectChanges) => ctx.ngZone.run(() => {\n                                onDataUpdated(subscription, detectChanges);\n                    }),\n                    onDataUpdateError: (subscription, e) => ctx.ngZone.run(() =>{\n                            onDataUpdateError(subscription, e);\n                    }),\n                    dataLoading: () => {}\n                }\n            };\n\n        var subscriptionsInfo = [{\n            type: \"entity\",\n            entityType: \"DEVICE\",\n            entityId: ctx.defaultSubscription.targetDeviceId\n        }];\n\n        subscriptionsInfo[0].timeseries = $scope.pins.map(function(pin) {\n            return {\n                name: pin.telemetryKey\n            };\n        });\n            \n        ctx.subscriptionApi.createSubscriptionFromInfo(\"latest\", subscriptionsInfo, subscriptionOptions, false, true).subscribe((subscription) => {\n            // console.log(\"subscription\", subscription);\n            telemetrySubscription = subscription;\n            // Update 'ioConfigName' attribute\n            attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", [{\n                    key: settings.ioConfigName,\n                    value: $scope.pins\n            }]).subscribe(function() {\n                // console.log(\"<-------ATTRIBUTE SAVED------->\");\n            });\n        });\n    }\n    \n    function saveChanges() {\n        // console.log(\"<-----------SAVING----------->\");\n        // Ensure Configuration Name is defined and unique\n        \n        // Ensure all inputs are defined\n        if ($scope.pins.length > 0) {\n            $scope.errors = [];\n            $scope.pins.forEach((pin, index) => {\n                // console.log(\"pin\", pin);\n                var emptyInputs = {\n                    label: pin.label.trim() === \"\",\n                    telemetryKey: pin.telemetryKey.trim() === \"\",\n                    pinNumber: pin.number === null,\n                    nodeId: pin.nodeId === null,\n                };\n\n                var pinHasEmptyInputs = Object.keys(emptyInputs).some(function(key) {\n                    return emptyInputs[key] === true;\n                });\n\n                if (pinHasEmptyInputs){\n                    $scope.errors.push({\n                        pinIndex: index,\n                        emptyInputs: emptyInputs\n                    });\n                }\n            });\n        }\n        // Ensure there are no identical telemetryKeys\n        var telemetryKeys = $scope.pins.map((pin) =>  pin.telemetryKey);\n        var hasDuplicateKeys = (new Set(telemetryKeys)).size !== telemetryKeys.length;\n        // console.log(\"telemetry Keys\", telemetryKeys, \"duplication?\", hasDuplicateKeys);\n        if(hasDuplicateKeys){\n            $scope.errors.push({\n                duplicateTelemetryKeys: true\n            })\n        }\n        \n        // Check errors & save changes\n        if ($scope.errors.length > 0) {\n            // console.log(\"Errors\", $scope.errors);\n            if($scope.errors.some(error => error.emptyInputs))\n                ctx.showWarnToast(\"Empty input fields are not allowed\")\n            else if($scope.errors.some(error => error.duplicateTelemetryKeys))\n                ctx.showErrorToast(\"Duplicate telemetry keys are not allowed\")\n        } else {\n            // Create subscriptions to telemetry values if they don't exist\n            if(!telemetrySubscription){\n                // console.log(\"<-------CREATE SUBSCRIPTION------->\")\n                createTelemetryKeysSubscription();\n                \n            }else{\n                // console.log(\"<-------UPDATE SUBSCRIPTION------->\");\n                ctx.subscriptionApi.removeSubscription(telemetrySubscription.id)\n                createTelemetryKeysSubscription();\n                \n            }\n        }\n    }\n};\n\nself.onDataUpdated = function() {}\n\nself.typeParameters = function() {\n    return {\n        maxDatasources: 1,\n        hasDataPageLink: false,\n        warnOnPageDataOverflow: false,\n        dataKeysOptional: true\n    };\n};\n\nself.onResize = function() {};\n\nself.onDestroy = function() {\n    // console.log(\"<------------DESTROY WIDGET------------>\")\n    // alert(\"Widget Destroyed\")\n    // Remove subscriptions and events\n    if(telemetrySubscription)\n        ctx.subscriptionApi.removeSubscription(telemetrySubscription.id);\n    \n    // Remove 'ioConfigName' attribute from device\n    // attributeService.deleteEntityAttributes(entityId, \"SERVER_SCOPE\", [{key: settings.ioConfigName}]).subscribe(function(data){\n    //     console.log(\"<------DELETED ATTRIBUTE------>\")\n    // })\n};",
      "settingsSchema" : "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Dry Contact Pins Settings\",\n        \"properties\": {\n            \"pinCardWidth\": {\n                \"title\": \"Pin Card Width (px)\",\n                \"type\": \"number\",\n                \"default\": 190\n            },\n            \"gap\": {\n                \"title\": \"Gap\",\n                \"type\": \"number\",\n                \"default\": 4\n            },\n            \"ioConfigName\": {\n                \"title\": \"IO Configuration Name\",\n                \"type\": \"string\",\n                \"default\": \"ioConfig\"\n            },\n            \"readOnly\": {\n                \"title\": \"Read Only\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"readOnlyTelemetry\":{\n                \"title\": \"Read Only Telemetry Key\",\n                \"type\": \"boolean\",\n                \"default\": true\n            }\n        },\n        \"required\": [\"ioConfigName\"]\n    },\n    \"form\": [\n        \"ioConfigName\",\n        \"readOnly\",\n        \"readOnlyTelemetry\"\n    ]\n}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"showTitle\":true,\"backgroundColor\":\"#111217\",\"color\":\"#ffffff\",\"padding\":\"8px\",\"settings\":{\"gap\":4,\"isEditMode\":false,\"pinCardWidth\":190,\"ioConfigName\":\"ioConfig\"},\"title\":\"Dry Contact Pins Widget\",\"targetDeviceAliases\":[],\"targetDeviceAliasIds\":[\"05816267-5eba-8dba-22e8-bf7fd79c672d\"],\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"widgetStyle\":{},\"widgetCss\":\"\",\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "333a89e0-5d08-11ee-aa32-9b0b88b17df7"
    }
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}