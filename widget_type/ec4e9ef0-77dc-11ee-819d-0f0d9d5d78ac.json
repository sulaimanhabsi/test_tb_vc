{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "mada_basic.vertical_bar",
    "name" : "Vertical Bar",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 3,
      "sizeY" : 5.5,
      "resources" : [ ],
      "templateHtml" : "<div class=\"bar\">\r\n    <h1>Temperature</h1>\r\n    <span class=\"value\"><span\r\n            class=\"degree\">0.00</span><span\r\n            class=\"symbol\"></span></span>\r\n    <div class=\"bar-content\">\r\n        <div class=\"bar-column\">\r\n            <span class=\"max\">\r\n                Max\r\n            </span>\r\n            <span class=\"min\">\r\n                Min\r\n            </span>\r\n            <span class=\"current-value\">\r\n\r\n            </span>\r\n        </div>\r\n        <div class=\"bar-labels\">\r\n        </div>\r\n    </div>\r\n</div>",
      "templateCss" : "\r\n* {\r\n    color: white;\r\n    box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n    font-family: \"TT Mussels\";\r\n    margin: 0;\r\n    padding: 0;\r\n    background-color: #f0f0f0;\r\n    width: 100%;\r\n    min-width: 100px;\r\n    height: 100%;\r\n}\r\n\r\n.bar {\r\n    width: 100%;\r\n    margin: 0 auto;\r\n    min-width: 100px;\r\n    height: 100%;\r\n    padding: 5% 2%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    font-family: TT Mussels, Arial, Sans-Serif;\r\n}\r\n\r\n#container {\r\n    border-radius: 20px;\r\n}\r\n\r\n.bar h1 {\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n    margin: 0;\r\n    margin-bottom: 8px;\r\n    color:#D9D9D9;\r\n    line-height: 100%;\r\n}\r\n\r\n.bar .value {\r\n    font-size: clamp(20px, 9vw, 40px);\r\n    text-align: center;\r\n    transition: 0.3s ease;\r\n    margin: auto 0;\r\n    font-weight: bold;\r\n}\r\n\r\n.value span {\r\n    color: inherit;\r\n}\r\n\r\n.value .symbol {\r\n    font-size: 18px;\r\n    font-weight: normal;\r\n}\r\n\r\n\r\n.bar-content {\r\n    overflow: hidden;\r\n    padding: 10px 0 10px 10px;\r\n    height: 80%;\r\n    width: 55%;\r\n    max-width: 150px;\r\n    min-width: 70px;\r\n    margin: 0 auto 0;\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n\r\n.bar-column {\r\n    width: 70%;\r\n    margin-right: 10px;\r\n    border-radius: 10px;\r\n    background: linear-gradient(0deg, rgba(255,255,255,1) 0%, rgba(255,98,0,1) 100%);\r\n    position: relative;\r\n}\r\n\r\n.bar-labels {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n}\r\n\r\n.bar-labels span {\r\n    line-height: 0;\r\n    color: gray;\r\n    font-size: inherit;\r\n}\r\n\r\n.min {\r\n    position: absolute;\r\n    width: 100%;\r\n    transform: translate(0, 100%);\r\n    left: 0;\r\n    color: black;\r\n    border-top: 1px solid black;\r\n    padding: 2px 0;\r\n    font-weight: bolder;\r\n    z-index: 2;\r\n    text-align: center;\r\n}\r\n\r\n.max {\r\n    position: absolute;\r\n    width: 100%;\r\n    left: 0;\r\n    z-index: 2;\r\n    color: black;\r\n    border-bottom: 1px solid black;\r\n    padding: 2px 0;\r\n    font-weight: bolder;\r\n    text-align: center;\r\n}\r\n\r\n.current-value {\r\n    position: absolute;\r\n    left: -5px;\r\n    right: -5px;\r\n    transition: 0.5s ease-in-out;\r\n    transform: translate(0, 50%);\r\n    box-shadow: 0 0 7px 1px black;\r\n    height: 5px;\r\n    border-radius: 3px;\r\n    background: lightgray;\r\n    bottom: 30%;\r\n    z-index: 1;\r\n}",
      "controllerScript" : "let labelsCount\nlet minLimit\nlet maxLimit\nlet maxValue\nlet minValue\nlet labelContainer\nlet valueDisplay\nlet degree\nlet minDisplay\nlet maxDisplay\nlet currentDisplay\nlet container\nlet barColumn\nlet barLabel\nlet gColorStart\nlet gColorEnd\nlet gValueSize\nlet gTickSize\n\nlet useDefaultSubscription = true;\n\nfunction hexToRgb(hex) {\n    const result =\n        /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\n        .exec(hex);\n    return result ? [parseInt(result[1], 16),\n        parseInt(result[2], 16), parseInt(result[3],\n            16)\n    ] : null;\n}\n\nfunction getChannels(rgb) {\n    const channels = rgb.substring(rgb.indexOf('(') + 1,\n            rgb.length - 1)\n        .replace(/ /g, '')\n        .split(',');\n    return channels.map(value => +value)\n}\n\nfunction setColors(start, end) {\n    let startColor = start\n    let endColor = end\n\n    if (endColor[0] === '#') {\n        endColor = hexToRgb(endColor)\n    } else {\n        endColor = getChannels(endColor)\n    }\n\n    if (endColor[0] === '#') {\n        startColor = hexToRgb(startColor)\n    } else {\n        startColor = getChannels(startColor)\n    }\n    gColorStart = startColor\n    gColorEnd = endColor\n}\n\nfunction resize() {\n    if (!container) return\n    labelContainer.style.fontSize =\n        `clamp(${gTickSize}px, ${container.height() * 0.01 * gTickSize}px, ${gTickSize * 3}px)`\n    minDisplay.style.fontSize =\n        `clamp(8px, ${container.height() * 0.05}px, 15px)`\n    maxDisplay.style.fontSize =\n        `clamp(8px, ${container.height() * 0.05}px, 15px)`\n    valueDisplay.style.fontSize =\n        `clamp(${3 * (gValueSize || 2)}px, ${container.width() * 0.1 * (gValueSize || 2)}px, ${12 * (gValueSize || 2)}px)`\n    currentDisplay.style.height =\n        `clamp(2px, ${container.height() * 0.01}px, 5px)`\n}\n\nfunction updateData(currentValue) {\n    let currentPercentage = (currentValue / (\n        maxValue - minValue));\n\n    if (currentPercentage > 1) {\n        currentPercentage = 1\n    }\n\n    if (currentPercentage < 0) {\n        currentPercentage = 0\n    }\n\n    degree.innerHTML = currentValue.toFixed(2)\n    let calculaltedColor = ''\n    if (!gColorEnd || !gColorStart) {\n        calculaltedColor = `rgba(255, ${\n    255 - 157 * (currentPercentage)\n}, ${\n    255 - 255 * (currentPercentage)\n}, 1)`\n\n    } else {\n        let red = gColorStart[0] - (gColorStart[0] -\n            gColorEnd[0]) * (currentPercentage)\n        let green = gColorStart[1] - (gColorStart[1] -\n            gColorEnd[1]) * (currentPercentage)\n        let blue = gColorStart[2] - (gColorStart[2] -\n            gColorEnd[2]) * (currentPercentage)\n\n        calculaltedColor =\n            `rgba(${red}, ${green}, ${blue}, 1)`\n    }\n\n    valueDisplay.style.color = calculaltedColor\n\n    currentDisplay.style.bottom = `${\n        currentPercentage * 100\n}%`\n}\n\nconst onDataUpdated = function(subscription){\n    const {data} = subscription;\n    console.log(\"onDataUpdated\", {data: data[0]})\n    updateData(data[0].data[0][1] || 0);\n    // barLabel.innerText = dataKeys[0].label;\n    // resize();\n};\n\nconst fetchRoomNumber = function(entityId){\n    return self.ctx.attributeService.getEntityAttributes(entityId, \"SERVER_SCOPE\", [\"roomNum\"]);\n};\n\nconst createTelemetryKeySubscription = (subscriptionsInfo) => {\n    const {subscriptionApi} = self.ctx;\n    \n    const subscriptionOptions = {\n        callbacks: {\n            onDataUpdated: (subscription, detectChanges) => ctx.ngZone.run(() => {\n                        onDataUpdated(subscription, detectChanges);\n            }),\n            // onDataUpdateError: (subscription, e) => ctx.ngZone.run(() =>{\n            //         onDataUpdateError(subscription, e);\n            // }),\n            dataLoading: (dataLoad) => {\n                // console.log({dataLoad})\n            }\n        }\n    };\n            \n    return subscriptionApi.createSubscriptionFromInfo(\"latest\", subscriptionsInfo, subscriptionOptions, false, true);\n};\n\nconst createCustomSubscription = function(){\n    const {defaultSubscription: {datasources}, settings} = self.ctx;\n    const {entityId, entityType} = datasources[0];\n    \n    fetchRoomNumber({id: entityId, entityType}).subscribe(function(result){\n        if(result.length < 1) return;\n        const roomNum = result[0].value;\n        \n        const {telemetryKeyPrefix} = settings;\n        // Create the subscriptions info array and subscribe to telemetry key(s)\n        const telemetryKey = telemetryKeyPrefix.prefix + \"_\" + roomNum;\n        const subscriptionsInfo = [{\n            type: \"entity\",\n            entityType,\n            entityId,\n            timeseries: [{name: telemetryKey, }]\n        }];\n        createTelemetryKeySubscription(subscriptionsInfo).subscribe(function(subscription){\n            // console.log({subscription});\n        });\n    });\n}\n\n\nself.onInit = function() {\n    self.ctx.$container.find('.bar').attr('id', self\n        .ctx.widget.id)\n\n    const parent = document.getElementById(self.ctx\n        .widget.id)\n\n    const {\n        enableTooltip,\n        font,\n        xSpacing,\n        ySpacing,\n        colorStart,\n        colorEnd,\n        barWidth,\n        unit,\n        unitSize,\n        valueSize,\n        max,\n        min,\n        minLabel,\n        maxLabel,\n        minLimitShown,\n        maxLimitShown,\n        tickRange,\n        tickSize,\n        tickShown\n    } = self.ctx.settings;\n    \n    gValueSize = valueSize\n    gTickSize = tickSize || 3\n\n    labelsCount = 15;\n    minLimit = min ?? 10;\n    maxLimit = max ?? 50;\n    maxValue = labelsCount * (tickRange || 5) - (\n        tickRange || 5);\n    minValue = 0;\n    labelContainer = parent.querySelector(\n        '.bar-labels');\n        \n    valueDisplay = parent.querySelector(\n        '.value');\n    degree = valueDisplay.querySelector('.degree')\n    minDisplay = parent.querySelector('.min');\n    maxDisplay = parent.querySelector('.max');\n    barLabel = parent.querySelector('h1')\n    currentDisplay = parent.querySelector(\n        '.current-value');\n\n    barColumn = parent.querySelector('.bar-column')\n    barColumn.style.width = `${barWidth}%`\n    const unitDisplay = parent.querySelector(\n        '.symbol')\n    unitDisplay.innerHTML = unit || '&deg;C'\n    unitDisplay.style.fontSize = unitSize\n\n\n    minDisplay.style.bottom = `${\n    (minLimit / (maxValue - minValue)) * 100\n}% `;\n    maxDisplay.style.bottom = `${\n    (maxLimit / (maxValue - minValue)) * 100\n}%`;\n    minDisplay.innerHTML = minLabel || 'Min'\n    maxDisplay.innerHTML = maxLabel || 'Max'\n\n    if (!minLimitShown) {\n        minDisplay.style.display = 'none'\n    }\n    \n    if (!maxLimitShown) {\n        maxDisplay.style.display = 'none'\n    }\n\n    if (colorStart && colorEnd) {\n        barColumn.style.background =\n            `linear-gradient(0deg, ${colorStart} 0%, ${colorEnd} 100%`\n        setColors(colorStart, colorEnd)\n    }\n    \n    container = self.ctx.$container.find('.bar');\n    \n    \n    if(tickShown){\n        let currentLabel = minValue;\n        let step = (tickRange || 5);\n        const labelsArray = [];\n        for (let i = 0; i < labelsCount; i++) {\n            const label = document.createElement(\n                'span');\n            label.innerText = Math.round(currentLabel)\n                .toString();\n            labelsArray.push(label)\n            currentLabel += step;\n        }\n        labelsArray.reverse();\n        labelContainer.append(...labelsArray);\n    }\n\n    \n    \n    const {defaultSubscription: {datasources, data}, settings} = ctx;\n    \n    const { telemetryKeyPrefix } = settings;\n    if(!datasources || datasources.length < 1) return;\n    // Check if a datakey is defined in the settings\n    \n    \n    const {entityId, entityType, dataKeys} = datasources[0];\n    \n    const dataKeysDefined = dataKeys && dataKeys.length > 0;\n    \n    console.log(\"data\", dataKeys)\n    \n    if(dataKeysDefined){\n        updateData(data[0]?.[1] || 0);\n        barLabel.innerText = dataKeys[0].label\n        resize();\n        \n        return;\n    }\n    \n    if(!telemetryKeyPrefix) return;\n    \n    barLabel.innerText = telemetryKeyPrefix.label || \"\";\n    // Create custom subscription since no data key is defined\n    useDefaultSubscription = false;\n\n    createCustomSubscription();\n}\n\nself.onDataUpdated = function() {\n    \n    if(!useDefaultSubscription) return;\n    \n    updateData(self.ctx.data[0].data[0]?.[1] || 0)\n    \n}\n\nself.onResize = function() {\n    resize()\n}\n\nself.typeParameters = function() {\n    return {\n        maxDatasources: 1,\n        maxDataKeys: 1,\n        dataKeysOptional: true\n    }\n}\n\nself.onDestroy = function() {}",
      "settingsSchema" : "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"unitSize\": {\n                \"title\": \"Unit size\",\n                \"type\": \"number\",\n                \"default\": 13\n            },\n            \"telemetryKeyPrefix\":{\n                \"title\": \"Telemetry Key Prefix\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"prefix\":{\n                        \"title\": \"Prefix\",\n                        \"type\": \"string\",\n                        \"default\": \"test\"\n                    },\n                    \"label\": {\n                        \"title\": \"Label\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"valueSize\": {\n                \"title\": \"Value size\",\n                \"type\": \"number\",\n                \"default\": 2\n            },\n            \"tickSize\": {\n                \"title\": \"Tick size\",\n                \"type\": \"number\",\n                \"default\": 3\n            },\n            \"tickShown\": {\n                \"title\": \"Show tick\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"max\": {\n                \"title\": \"Max\",\n                \"type\": \"number\",\n                \"default\": 50\n            },\n            \"min\": {\n                \"title\": \"Min\",\n                \"type\": \"number\",\n                \"default\": 10\n            },\n            \"minLabel\": {\n                \"title\": \"Min label\",\n                \"type\": \"string\",\n                \"default\": \"Min\"\n            },\n            \"maxLabel\": {\n                \"title\": \"Max label\",\n                \"type\": \"string\",\n                \"default\": \"Max\"\n            },\n            \"maxLimitShown\": {\n                \"title\": \"Max show\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"minLimitShown\": {\n                \"title\": \"Min show\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"barWidth\": {\n                \"title\": \"Bar width\",\n                \"type\": \"number\",\n                \"default\": 70\n            },\n            \"tickRange\": {\n                \"title\": \"Tick range\",\n                \"type\": \"number\",\n                \"default\": 5\n            },\n            \"font\": {\n                \"title\": \"Font\",\n                \"default\": \"Roboto Mono\",\n                \"type\": \"string\"\n            },\n            \"unit\": {\n                \"title\": \"Unit\",\n                \"default\": \"&deg;C\",\n                \"type\": \"string\"\n            },\n            \"colorStart\": {\n                \"title\": \"Start color\",\n                \"default\": \"rgba(255,255,255,1)\",\n                \"type\": \"string\"\n            },\n            \"colorEnd\": {\n                \"title\": \"End color\",\n                \"default\": \"rgba(255,98,0,1)\",\n                \"type\": \"string\"\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"telemetryKeyPrefix\",\n        \"font\",\n        {\n            \"key\": \"colorStart\",\n            \"type\": \"color\"\n        },\n        {\n            \"key\": \"colorEnd\",\n            \"type\": \"color\"\n        },\n        \"barWidth\",\n        \"unitSize\",\n        \"valueSize\",\n        \"unit\",\n        \"max\",\n        \"min\",\n        \"minLabel\",\n        \"maxLabel\",\n        \"minLimitShown\",\n        \"maxLimitShown\",\n        \"tickRange\",\n        \"tickSize\",\n        \"tickShown\"\n    ]\n}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#1C242E\",\"color\":\"#D9D9D9\",\"padding\":\"8px\",\"settings\":{\"font\":\"Roboto Mono\",\"colorStart\":\"rgba(255,255,255,1)\",\"colorEnd\":\"rgba(255,98,0,1)\",\"barWidth\":70,\"unit\":\"&deg;C\",\"minLabel\":\"Min\",\"maxLabel\":\"Max\",\"tickRange\":5,\"tickSize\":3,\"tickShown\":true,\"maxLimitShown\":false,\"minLimitShown\":true,\"unitSize\":13,\"valueSize\":2,\"max\":50,\"min\":10},\"title\":\"Vertical Bar\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"borderRadius\":\"12px\"},\"widgetCss\":\"\",\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"pageSize\":1024,\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "ec4e9ef0-77dc-11ee-819d-0f0d9d5d78ac"
    }
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}