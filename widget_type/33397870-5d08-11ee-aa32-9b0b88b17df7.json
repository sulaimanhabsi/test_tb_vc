{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "onsor_custom.inputs_list_widget",
    "name" : "Inputs List Widget",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 11,
      "sizeY" : 8.5,
      "resources" : [ ],
      "templateHtml" : "\n<div id=\"widget-container\" width=\"100%\" style=\"font-family: Tajawal, Roboto\"> \n    <div id=\"txt-div\" class=\"txt-div\"></div>\n    <div id=\"btn-div\" class=\"action-btns-container\" width=\"100%\">\n        <button class=\"action-btn\" id=\"btn_add\">Add</button>\n        <button class=\"action-btn\" id=\"btn_save\">Save</button>\n    </div>\n</div>\n",
      "templateCss" : "\r\n#widget-container{\r\n    /*border: 2px solid red;*/\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height:95%;\r\n    width: 100%;\r\n    \r\n} \r\n\r\n.txt-div{\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    /*border: 2px solid  green;*/\r\n    height: 100%;\r\n    width: 100%;\r\n    overflow-y: auto;\r\n    padding: 12px 0;\r\n}\r\n\r\n.action-btns-container{\r\n    /*border: 2px solid  blue;*/\r\n    width: 100%;\r\n    display: flex;    \r\n    flex-direction: row;\r\n    justify-content: space-around;\r\n    padding-top: 12px;\r\n    position: sticky;\r\n}\r\n\r\n.action-btn {\r\n    padding: 1em 3em;\r\n    font-size: 12px;\r\n    text-transform: uppercase;\r\n    letter-spacing: 2.5px;\r\n    font-weight: 500;\r\n    color: #000;\r\n    background-color: #fff;\r\n    border: none;\r\n    border-radius: 45px;\r\n    box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.1);\r\n    transition: all 0.3s ease 0s;\r\n    cursor: pointer;\r\n    outline: none;\r\n}\r\n  \r\n.action-btn:hover, .action-btn:focus {\r\n    background-color: #b2feff;\r\n    box-shadow: 0px 12px 15px rgba(154, 202, 183, 0.3);\r\n    color:#000;\r\n    transform: translateY(-5px);\r\n}\r\n  \r\n.action-btn:active {\r\n    transform: translateY(-1px);\r\n}\r\n  \r\n.input-field input {\r\n  color:white;\r\n  font-family: Tajawal, Helvetica, Arial, sans-serif;\r\n  font-weight:500;\r\n  font-size: 18px;\r\n  border-radius: 5px;\r\n  line-height: 22px;\r\n  background-color: transparent;\r\n  border:2px solid #b2feff;\r\n  transition: all 0.3s;\r\n  padding: 13px;\r\n  width:100%;\r\n  box-sizing: border-box;\r\n  outline:0;\r\n}\r\n\r\n/*.feedback-input:invalid{*/\r\n  \r\n/*  border-color: red;*/\r\n/*}*/\r\n\r\n.feedback-input.success {\r\n   border-color: #2ecc71;\r\n}\r\n\r\n.input-field{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    gap: 12px;\r\n    margin-bottom: 15px;\r\n}\r\n.input-field .remove-btn{\r\n    border:2px solid #b2feff;\r\n    background: none;\r\n    border-radius: 5px;\r\n    color: inherit;\r\n    padding: 0 15px;\r\n    transition: background .2s ease;\r\n    outline: none;\r\n}\r\n\r\n.input-field .remove-btn:hover,\r\n.input-field .remove-btn:focus{\r\n    cursor: pointer;\r\n    background: rgba(178, 254, 255, 0.2);\r\n}\r\n  \r\n.input-field input:focus {\r\n    background: rgba(178, 254, 255, 0.2);\r\n}",
      "controllerScript" : "let $scope;\nlet settings;\nlet attributeService;\nlet update_flag = false;\nlet inputsCount = 0;\nlet containerDiv;\nlet widgetId;\nlet btn_save;\nlet btn_add ;\nlet entityId;\nlet inputTypes;\nlet isInputPhoneNumber = false;\nlet isInputEmailAddress = false;\n\n\nfunction init(){\n    $scope = self.ctx.$scope;\n    // console.log(self.ctx);\n    attributeService = self.ctx.attributeService;\n    settings = self.ctx.settings;\n    widgetId = self.ctx.widget.id;\n    entityId = self.ctx.datasources[0].entity.id;\n    \n    inputTypes = {\n        email: \"email\",\n        phone: \"tel\",\n        text: \"text\"\n    };\n    \n    isInputPhoneNumber = settings.inputsType === inputTypes.phone;\n    isInputEmailAddress = settings.inputsType === inputTypes.email;\n    \n    containerDiv = $('#txt-div');\n    containerDiv.attr('id','div-'+ widgetId);\n}\n\nself.onInit = function() {\n    self.ctx.ngZone.run(function() {\n       init(); \n       self.ctx.detectChanges(true);\n    //   console.log($scope);\n       \n       loadValues();\n    });\n    \n    btn_save = $('#btn_save');\n    btn_save.attr('id','btnS-'+widgetId);\n    btn_add = $('#btn_add');\n    btn_add.attr('id','btnA-'+widgetId);\n    \n    btn_add.click(()=>{\n    //  console.log(self.ctx.data);\n        var inputsCount = containerDiv.children().length;\n        var defaultInputValue = isInputPhoneNumber ? \"968\" : isInputEmailAddress ? `example${inputsCount + 1}@onsor.om` : `text${inputsCount + 1}`;\n        var fieldElement = addField(containerDiv, inputsCount, defaultInputValue);\n        \n        addRemoveFieldEventListener(fieldElement);\n    // loadValues();\n    });\n    \n    btn_save.click(()=>{\n        var fields = containerDiv.children('.input-field');\n        var valuesList = [];\n        // console.log(fields);\n        \n        fields.each((i, field)=>{\n            var inputElement = $(field).children(\"input\").first();\n            // console.log(inputElement);\n            valuesList.push(inputElement.val());\n        });\n        \n        saveAttribute(valuesList);\n    });\n};\n\nself.onDataUpdated = function(){};\n\nself.onResize = function() {};\n\nfunction addRemoveFieldEventListener(fieldElement){\n    var removeBtn = fieldElement.children(\"button.remove-btn\").first();\n    removeBtn.click(function(event){\n        fieldElement.remove();\n    });\n}\n\nself.onDestroy = function() {\n    $scope = null;\n    settings  = null;\n    attribService = null;\n    update_flag = false;\n    inputsCount = 0;\n    containerDiv  = null;\n    widgetId  = null;\n    btn_save  = null;\n    btn_add  = null;\n};\n\nfunction addField($dist, index , text){\n    // console.log(\"adding field\");\n    var placeholder = isInputPhoneNumber ? \"Enter phone number\": (isInputEmailAddress ? \"Enter email address\" : \"\");\n    \n    var field = `\n        <div class=\"input-field\">\n            <input id=\"in_${index}_${widgetId}\"\" class=\"\" type=\"${settings.inputsType}\" value=\"${text}\" ${isInputPhoneNumber ? `pattern=\"[0-9]{3,11}\"` : \"\"} placeholder=\"${placeholder}\" />\n            <button class=\"remove-btn\">\n                <svg class=\"svg-icon\" style=\"width: 1em; height: 1em;vertical-align: middle;fill: currentColor;overflow: hidden;\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M906.158731 56.888889 707.047619 56.888889 650.158731 0 365.714286 0 308.825397 56.888889 109.714286 56.888889 109.714286 170.666666 906.158731 170.666666 906.158731 56.888889ZM166.603175 910.222226C166.603175 972.8 217.803175 1024 280.380952 1024L735.492065 1024C798.069842 1024 849.26984 972.8 849.26984 910.222226L849.26984 227.555556 166.603175 227.555556 166.603175 910.222226 166.603175 910.222226Z\" /></svg>\n            </button>\n        </div>\n    `;\n    var fieldElement = $(field);\n    $dist.append(fieldElement);\n    \n    return fieldElement;\n}\n\nfunction checkErrors(){\n    var errors = [];\n    var fields = containerDiv.children(\".input-field\");\n    var values = fields.map(function(i, field){\n        var inputElement = $(field).children(\"input\").first();\n        // console.log(\"inputElement\", inputElement.val());\n        return inputElement.val().trim();\n    }).get();\n    \n    // console.log(\"values\", values);\n    // Ensure there are no empty inputs\n    var hasEmptyInputs = values.some(function(value){\n        return value === \"\" || value === undefined || value === null;\n    });\n    \n    if(hasEmptyInputs) errors.push(\"Input fields cannot be empty!\");\n    \n    // Ensure there are all inputs are valid\n    var inputsValidity = [];\n    fields.each(function(i, field){\n        var inputElement = $(field).children(\"input\").first();\n        var valid = inputElement[0].checkValidity();\n        \n        if(valid) inputElement.css({borderColor: \"#b2feff\"});\n        else inputElement.css({borderColor: \"red\"});\n        \n        inputsValidity.push(valid);\n    });\n    \n    // console.log(inputsValidity);\n    \n    var inputsAreValid = inputsValidity.every(function(valid){ return valid === true});\n    \n    // console.table({settingsType: settings.inputsType, type: inputTypes.phone});\n    if(!inputsAreValid){\n        if(isInputEmailAddress) errors.push(\"Please enter valid email addresses!\");\n        else if (isInputPhoneNumber) errors.push(\"Please enter valid phone numbers!\");\n        else  errors.push(\"Please enter valid texts!\");\n    }\n    \n    // Ensure there are no duplicate values\n    var hasDuplicateValues = (new Set(values)).size !== values.length;\n    \n    if(hasDuplicateValues) errors.push(\"Duplicate values are not allowed!\");\n    \n    \n    return errors;\n}\n\nfunction loadValues(){\n    var attributeKey = self.ctx.defaultSubscription.datasources[0].dataKeys[0].name;\n    \n    if(attributeKey !== \"f(x)\"){\n        attributeService.getEntityAttributes(entityId, \"SERVER_SCOPE\", [attributeKey]).subscribe(function(data){\n            // console.log(\"data\", data);\n            var valuesList = data[0].value;\n            \n            valuesList.forEach(function(value){\n                var inputsCount = containerDiv.children().length;\n                var fieldElement = addField(containerDiv, inputsCount, value);\n                \n                addRemoveFieldEventListener(fieldElement);\n            });\n        });\n    }else{\n        // console.log(\"def subscription\",self.ctx.defaultSubscription)\n        var data = self.ctx.defaultSubscription.data[0].data;\n        // console.log(\"data\", data)\n    }\n    \n}\n\nfunction saveAttribute(attributeValue){\n    // var attributeKey = settings.attributeKey;\n    var attributeKey = self.ctx.defaultSubscription.datasources[0].dataKeys[0].name\n    \n    // console.log(entityId, attributeKey);\n    \n    var errors = checkErrors();\n    \n    if(errors.length > 0){\n        self.ctx.showErrorToast(errors[0]);\n        return;\n    }\n    attributeService.saveEntityAttributes(entityId,'SERVER_SCOPE', [\n        {\n            key: attributeKey,\n            value: attributeValue\n        }\n    ]).subscribe(() => {\n        // console.log('attribute saved');\n        self.ctx.showSuccessToast(\"Values saved!\");\n    }, () => {\n        // console.log('fail to save attribute');\n        self.ctx.showErrorToast(\"Unable to save values!\");\n    });\n}\n",
      "settingsSchema" : "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"EntitiesTableSettings\",\n        \"properties\": {\n            \"widgetTitle\": {\n                \"title\": \"Widget title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"inputsType\": {\n                \"title\": \"Inputs Type\",\n                \"type\": \"string\",\n                \"enum\":[\"email\", \"tel\", \"text\"],\n                \"default\": \"email\"\n            },\n            \"showLabel\":{\n                \"title\":\"Show label\",\n                \"type\":\"boolean\",\n                \"default\":true\n            },\n            \"requiredErrorMessage\": {\n                \"title\": \"'Required' error message\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"maxLength\": {\n                \"title\": \"Max length\",\n                \"type\": \"number\",\n                \"default\": \"\"\n            },\n            \"minLength\": {\n                \"title\": \"Min length\",\n                \"type\": \"number\",\n                \"default\": \"\"\n            },\n            \"showResultMessage\":{\n                \"title\":\"Show result message\",\n                \"type\":\"boolean\",\n                \"default\":true\n            },\n            \"isRequired\":{\n                \"title\":\"Required\",\n                \"type\":\"boolean\",\n                \"default\":true\n            }\n        },\n        \"required\": [\"inputsType\"]\n    },\n    \"form\": [\n        \"widgetTitle\",\n        {\n            \"key\": \"inputsType\",\n            \"type\": \"select\",\n            \"titleMap\": [\n                {\n                    \"value\": \"email\",\n                    \"name\": \"Email Address\"\n                },\n                {\n                    \"value\": \"tel\",\n                    \"name\": \"Phone Number\"\n                },\n                {\n                    \"value\": \"text\",\n                    \"name\": \"Text\"\n                }\n            ]\n        }\n    ]\n}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var data = `[\\\"example1@onsor.om\\\",\\\"example2@onsor.om\\\",\\\"example3@onsor.om\\\"]`;\\n\\nreturn data;\",\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#111217\",\"color\":\"#ffffff\",\"padding\":\"8px\",\"settings\":{\"showResultMessage\":true,\"showLabel\":true,\"isRequired\":true,\"inputsType\":\"email\"},\"title\":\"Inputs List Widget\",\"showTitleIcon\":false,\"dropShadow\":true,\"enableFullscreen\":false,\"widgetStyle\":{},\"widgetCss\":\"\",\"noDataDisplayMessage\":\"\",\"showLegend\":false,\"titleTooltip\":\"\",\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400}}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "33397870-5d08-11ee-aa32-9b0b88b17df7"
    }
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}